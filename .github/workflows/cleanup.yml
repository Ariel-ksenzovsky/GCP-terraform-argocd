name: Cleanup Old Images and Helm Charts

on:
  workflow_dispatch:
    inputs:
      retention_days:
        description: 'Number of days to retain images and charts'
        required: true
        type: number

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Cleanup DockerHub repository
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          set -e
          echo "Logging in to DockerHub..."
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d '{"username": "'"$DOCKER_USERNAME"'", "password": "'"$DOCKER_PASSWORD"'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to retrieve token"
            exit 1
          fi

          REPO="arielk2511/star_meme_sql_compose"
          echo "Fetching tags for repository $REPO..."

          # Fetch all tags (assumes less than 100 tags; adjust pagination if needed)
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" \
            | jq -r '.results | sort_by(.last_updated) | reverse | .[].name')

          echo "All tags:"
          echo "$TAGS"

          # Keep only the latest 5 tags
          KEEP_TAGS=$(echo "$TAGS" | head -n 5)
          echo "Tags to keep (latest 5):"
          echo "$KEEP_TAGS"

          # Delete tags that are not in KEEP_TAGS
          for tag in $TAGS; do
            if echo "$KEEP_TAGS" | grep -qx "$tag"; then
              echo "Keeping tag: $tag"
            else
              echo "Deleting tag: $tag"
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" \
                "https://hub.docker.com/v2/repositories/$REPO/tags/$tag/"
            fi
          done

          echo "Cleanup completed."

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Cleanup Helm Charts from S3 Bucket
        run: |
            # Set the retention threshold in days
            retention_days="${{ github.event.inputs.retention_days }}"
        
            # List Helm charts in the S3 bucket under the 'charts' folder
            charts=$(aws s3 ls s3://helm-flask-star-images/charts/ --recursive)
        
            # Iterate over each chart file and delete if older than retention threshold
            while read -r line; do
              # Extract the chart path and date from the output
              chart_date=$(echo $line | awk '{print $1 " " $2}')
              chart_name=$(echo $line | awk '{print $4}')
              
              # Remove the 'charts/' prefix from the chart name
              chart_name_without_prefix=$(echo $chart_name | sed 's/^charts\///')
              
              # Convert chart date to timestamp
              chart_timestamp=$(date -d "$chart_date" +%s)
              
              # Get the retention threshold timestamp
              threshold_timestamp=$(date -d "$retention_days days ago" +%s)
        
              # Compare the chart's timestamp with the retention threshold
              if [ $chart_timestamp -lt $threshold_timestamp ]; then
                echo "Deleting old chart: $chart_name_without_prefix"
                aws s3api delete-object --bucket helm-flask-star-images --key "charts/$chart_name_without_prefix"
              fi
            done <<< "$charts"
        
        
