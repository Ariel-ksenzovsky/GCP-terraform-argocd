name: 'Deploy to GKE'

on:
  workflow_run:
    workflows: ["CI-Helm"]  # Replace with the name of your CI workflow
    types:
      - completed  # Trigger only when the CI pipeline is completed

jobs:
  deploy:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}  # Ensure the job runs only if CI succeeds
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Configure AWS Credentials # for s3 tf remote state - accessing s3 bucket.
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
  
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT }}
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          # Install the Google Cloud SDK if it's not already installed
          curl https://sdk.cloud.google.com | bash
          source $HOME/google-cloud-sdk/path.bash.inc
          # Install the plugin using the appropriate command
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin


      - name: Set up Google Cloud credentials for Terraform
        run: |
          ECHO '${{ secrets.GCP_SA_KEY }}' | base64 --decode > /tmp/key.json
          echo "GOOGLE_CREDENTIALS=/tmp/key.json" >> $GITHUB_ENV

      - name: Initialize Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd terraform-gcp
          terraform init

      - name: Apply Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd terraform-gcp
          terraform apply -auto-approve

      - name: Authenticate with Google Cloud
        run: |
          echo "$GCP_SA_KEY" > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          gcloud config set project $GCP_PROJECT
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        
      - name: Fetch GKE Credentials
        run: |
          gcloud container clusters get-credentials ariel-flask-cluster --zone us-central1-a --project $GCP_PROJECT
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

      - name: Add argo helm repo
        run: |
            helm repo add argo https://argoproj.github.io/argo-helm
            helm repo update
  
      - name: deploy argo to k8s
        run: |
            set -ex
            gcloud components update
            gcloud components install gke-gcloud-auth-plugin
            helm upgrade --install ariel-argo argo/argo-cd --namespace argocd --create-namespace
  
      - name: open argocd in browser
        run: |
           kubectl patch svc ariel-argo-argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
  
      - name: Get the ArgoCD Admin Password
        run: |
            kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode
  
      - name: aplly prometheus and flask yamls
        run: |
            kubectl apply -f applications -n argocd
      

